package Sequence;

import Logic.Users.Settings;
import java.awt.Color;
import java.awt.Image;
import java.io.File;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JToggleButton;

/**
 *
 * @author josue
 */
public class GameConfig extends javax.swing.JFrame {
    private final String[] Type = {"Seleccione un tipo de carta", "Ases","Reinas", "Reyes", "Joker 1", "Joker 2"};
    private final String[] Cards = {"GG","A", "Q","K", "J1", "J2"};
    private final ArrayList<String> Iconos;
    private final File Cartas;
    private int Pos;
    
    public GameConfig() {
        Iconos = new ArrayList();
        Cartas = new File("Icons");

        initComponents();
        setLocationRelativeTo(null);
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/Elementos/GameIcon.png")).getImage());
        
        setToggles();
        setComboBoxes();
        setDescriptionBox();
        
        ModificadoresActivos.setSelected(true);
        ModificadoresActivos.setBackground(Color.green);
        ModificadoresActivos.setText("Activo");
        
        Left.setVisible(true);
        Right.setVisible(true);
        ExampleIcon.setText(null);
    }
    
    private void setToggles(){
        PresionarBTN(BloquearEspacioBTN);
        PresionarBTN(CambiarCartaBTN);
        PresionarBTN(CambiarFichasBTN);
        PresionarBTN(ElegirCartaBTN);
        PresionarBTN(EliminarCartaBTN);
        PresionarBTN(EliminarFichaBTN);
        PresionarBTN(LiberarEspacioBTN);
        PresionarBTN(OcuparEspacioBTN);

        PresionarBTN(ModificadoresActivos);
        PresionarBTN(CompartirFichas);
        
    }
    
    private void setComboBoxes(){
        for (java.awt.Component Combo : ComboBoxes.getComponents()){
            if (Combo instanceof JComboBox){
                ((JComboBox) Combo).setModel(new javax.swing.DefaultComboBoxModel(Type));
            }
        }
        ElegirTipoDeCartas.setModel(new javax.swing.DefaultComboBoxModel(Cartas.list()));
        ElegirTipoDeCartas.setSelectedIndex(0);
    }
    
    private void setDescriptionBox(){
        Description.setFont(new java.awt.Font("Cambria",0,16));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Description = new javax.swing.JTextArea();
        ExampleIcon = new javax.swing.JLabel();
        Modif2TXT = new javax.swing.JLabel();
        TeamSeparator = new javax.swing.JSeparator();
        Modif1TXT = new javax.swing.JLabel();
        Modif4TXT = new javax.swing.JLabel();
        Modif3TXT = new javax.swing.JLabel();
        Modif5TXT = new javax.swing.JLabel();
        Modif7TXT = new javax.swing.JLabel();
        Modif6TXT = new javax.swing.JLabel();
        GameModifiersTXT = new javax.swing.JLabel();
        ModifierSeparator = new javax.swing.JSeparator();
        TeamSettingsTXT = new javax.swing.JLabel();
        Modif8TXT = new javax.swing.JLabel();
        FichasCompartidas1 = new javax.swing.JLabel();
        ActivarModificadoresTXT = new javax.swing.JLabel();
        ModificadoresActivos = new javax.swing.JToggleButton();
        CompartirFichas = new javax.swing.JToggleButton();
        ElegirTipoDeCartas = new javax.swing.JComboBox<>();
        SeleccionarEstiloTXT = new javax.swing.JLabel();
        ComboBoxes = new javax.swing.JPanel();
        BloquearEspacio = new javax.swing.JComboBox();
        LiberarEspacio = new javax.swing.JComboBox();
        OcuparEspacio = new javax.swing.JComboBox();
        EliminarCarta = new javax.swing.JComboBox();
        CambiarCartas = new javax.swing.JComboBox();
        ElegirCartas = new javax.swing.JComboBox();
        CambiarFichas = new javax.swing.JComboBox();
        EliminarFichas = new javax.swing.JComboBox();
        CambiarFichasBTN = new javax.swing.JToggleButton();
        ElegirCartaBTN = new javax.swing.JToggleButton();
        CambiarCartaBTN = new javax.swing.JToggleButton();
        EliminarCartaBTN = new javax.swing.JToggleButton();
        OcuparEspacioBTN = new javax.swing.JToggleButton();
        LiberarEspacioBTN = new javax.swing.JToggleButton();
        BloquearEspacioBTN = new javax.swing.JToggleButton();
        EliminarFichaBTN = new javax.swing.JToggleButton();
        Cargar = new javax.swing.JButton();
        Guardar = new javax.swing.JButton();
        Right = new javax.swing.JButton();
        Left = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        Reiniciar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sequence");
        setMinimumSize(new java.awt.Dimension(800, 600));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Description.setEditable(false);
        Description.setColumns(20);
        Description.setLineWrap(true);
        Description.setRows(5);
        Description.setWrapStyleWord(true);
        Description.setPreferredSize(new java.awt.Dimension(240, 80));
        jScrollPane1.setViewportView(Description);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 170, 270, 430));

        ExampleIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ExampleIcon.setText("Example Icon");
        ExampleIcon.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel1.add(ExampleIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 0, 210, 170));

        Modif2TXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Modif2TXT.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Modif2TXT.setText("Liberar espacio");
        jPanel1.add(Modif2TXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 180, -1));
        jPanel1.add(TeamSeparator, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 460, 520, 10));

        Modif1TXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Modif1TXT.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Modif1TXT.setText("Bloquear espacio");
        jPanel1.add(Modif1TXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 180, -1));

        Modif4TXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Modif4TXT.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Modif4TXT.setText("Eliminar carta de oponente");
        jPanel1.add(Modif4TXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, 180, -1));

        Modif3TXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Modif3TXT.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Modif3TXT.setText("Ocupar espacio");
        jPanel1.add(Modif3TXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, 180, -1));

        Modif5TXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Modif5TXT.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Modif5TXT.setText("Cambiar cartas");
        jPanel1.add(Modif5TXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 320, 180, -1));

        Modif7TXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Modif7TXT.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Modif7TXT.setText("Cambiar fichas");
        jPanel1.add(Modif7TXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 380, 180, -1));

        Modif6TXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Modif6TXT.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Modif6TXT.setText("Elegir cartas");
        jPanel1.add(Modif6TXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 350, 180, -1));

        GameModifiersTXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        GameModifiersTXT.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        GameModifiersTXT.setText("Modificadores de juego");
        jPanel1.add(GameModifiersTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 170, 520, -1));
        jPanel1.add(ModifierSeparator, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 190, 520, 10));

        TeamSettingsTXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        TeamSettingsTXT.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TeamSettingsTXT.setText("Configuraciones de la partida");
        jPanel1.add(TeamSettingsTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 440, 520, -1));

        Modif8TXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Modif8TXT.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Modif8TXT.setText("Eliminar fichas");
        jPanel1.add(Modif8TXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 410, 180, -1));

        FichasCompartidas1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        FichasCompartidas1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        FichasCompartidas1.setText("Compartir fichas");
        jPanel1.add(FichasCompartidas1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 480, 180, -1));

        ActivarModificadoresTXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ActivarModificadoresTXT.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        ActivarModificadoresTXT.setText("Activar modificadores");
        jPanel1.add(ActivarModificadoresTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 510, 180, -1));

        ModificadoresActivos.setFocusable(false);
        ModificadoresActivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificadoresActivosActionPerformed(evt);
            }
        });
        jPanel1.add(ModificadoresActivos, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 510, 100, 20));

        CompartirFichas.setFocusable(false);
        CompartirFichas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompartirFichasActionPerformed(evt);
            }
        });
        jPanel1.add(CompartirFichas, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 480, 100, 20));

        ElegirTipoDeCartas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ElegirTipoDeCartas.setName("TipoDeCartas"); // NOI18N
        ElegirTipoDeCartas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ElegirTipoDeCartasActionPerformed(evt);
            }
        });
        jPanel1.add(ElegirTipoDeCartas, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 510, 170, 20));
        ElegirTipoDeCartas.getAccessibleContext().setAccessibleName("");

        SeleccionarEstiloTXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        SeleccionarEstiloTXT.setText("Seleccionar estilo de cartas:");
        jPanel1.add(SeleccionarEstiloTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 480, 170, -1));

        ComboBoxes.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BloquearEspacio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        BloquearEspacio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BloquearEspacioActionPerformed(evt);
            }
        });
        ComboBoxes.add(BloquearEspacio, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 190, 20));
        BloquearEspacio.getAccessibleContext().setAccessibleParent(ComboBoxes);

        LiberarEspacio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        LiberarEspacio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LiberarEspacioActionPerformed(evt);
            }
        });
        ComboBoxes.add(LiberarEspacio, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 190, 20));

        OcuparEspacio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        OcuparEspacio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OcuparEspacioActionPerformed(evt);
            }
        });
        ComboBoxes.add(OcuparEspacio, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 190, 20));

        EliminarCarta.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        EliminarCarta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarCartaActionPerformed(evt);
            }
        });
        ComboBoxes.add(EliminarCarta, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 190, 20));

        CambiarCartas.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        CambiarCartas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CambiarCartasActionPerformed(evt);
            }
        });
        ComboBoxes.add(CambiarCartas, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 120, 190, 20));

        ElegirCartas.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ElegirCartas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ElegirCartasActionPerformed(evt);
            }
        });
        ComboBoxes.add(ElegirCartas, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 150, 190, 20));

        CambiarFichas.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        CambiarFichas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CambiarFichasActionPerformed(evt);
            }
        });
        ComboBoxes.add(CambiarFichas, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 180, 190, 20));

        EliminarFichas.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        EliminarFichas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarFichasActionPerformed(evt);
            }
        });
        ComboBoxes.add(EliminarFichas, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 210, 190, 20));

        CambiarFichasBTN.setFocusable(false);
        CambiarFichasBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CambiarFichasBTNActionPerformed(evt);
            }
        });
        ComboBoxes.add(CambiarFichasBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 180, 100, 20));

        ElegirCartaBTN.setFocusable(false);
        ElegirCartaBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ElegirCartaBTNActionPerformed(evt);
            }
        });
        ComboBoxes.add(ElegirCartaBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 150, 100, 20));

        CambiarCartaBTN.setFocusable(false);
        CambiarCartaBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CambiarCartaBTNActionPerformed(evt);
            }
        });
        ComboBoxes.add(CambiarCartaBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 120, 100, 20));

        EliminarCartaBTN.setFocusable(false);
        EliminarCartaBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarCartaBTNActionPerformed(evt);
            }
        });
        ComboBoxes.add(EliminarCartaBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 90, 100, 20));

        OcuparEspacioBTN.setFocusable(false);
        OcuparEspacioBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OcuparEspacioBTNActionPerformed(evt);
            }
        });
        ComboBoxes.add(OcuparEspacioBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 60, 100, 20));

        LiberarEspacioBTN.setFocusable(false);
        LiberarEspacioBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LiberarEspacioBTNActionPerformed(evt);
            }
        });
        ComboBoxes.add(LiberarEspacioBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 30, 100, 20));

        BloquearEspacioBTN.setFocusable(false);
        BloquearEspacioBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BloquearEspacioBTNActionPerformed(evt);
            }
        });
        ComboBoxes.add(BloquearEspacioBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 0, 100, 20));

        EliminarFichaBTN.setFocusable(false);
        EliminarFichaBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarFichaBTNActionPerformed(evt);
            }
        });
        ComboBoxes.add(EliminarFichaBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 210, 100, 20));

        jPanel1.add(ComboBoxes, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 200, 310, 230));

        Cargar.setText("Cargar ajustes");
        Cargar.setFocusable(false);
        Cargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CargarActionPerformed(evt);
            }
        });
        jPanel1.add(Cargar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 550, 160, 30));

        Guardar.setText("Guardar ajustes");
        Guardar.setFocusable(false);
        Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarActionPerformed(evt);
            }
        });
        jPanel1.add(Guardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 550, 160, 30));

        Right.setBorder(null);
        Right.setFocusable(false);
        Right.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RightActionPerformed(evt);
            }
        });
        jPanel1.add(Right, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 0, 30, 170));

        Left.setFocusable(false);
        Left.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LeftActionPerformed(evt);
            }
        });
        jPanel1.add(Left, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 0, 30, 170));

        jButton1.setFocusable(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 30, 30));

        Reiniciar.setText("Reiniciar ajustes");
        Reiniciar.setFocusable(false);
        Reiniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReiniciarActionPerformed(evt);
            }
        });
        jPanel1.add(Reiniciar, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 550, 160, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 600));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BloquearEspacioBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BloquearEspacioBTNActionPerformed
        PresionarBTN((javax.swing.JToggleButton) evt.getSource());
    }//GEN-LAST:event_BloquearEspacioBTNActionPerformed

    private void OcuparEspacioBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OcuparEspacioBTNActionPerformed
        PresionarBTN((javax.swing.JToggleButton) evt.getSource());
    }//GEN-LAST:event_OcuparEspacioBTNActionPerformed

    private void LiberarEspacioBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LiberarEspacioBTNActionPerformed
        PresionarBTN((javax.swing.JToggleButton) evt.getSource());
    }//GEN-LAST:event_LiberarEspacioBTNActionPerformed

    private void CambiarCartaBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CambiarCartaBTNActionPerformed
        PresionarBTN((javax.swing.JToggleButton) evt.getSource());
    }//GEN-LAST:event_CambiarCartaBTNActionPerformed

    private void EliminarCartaBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarCartaBTNActionPerformed
        PresionarBTN((javax.swing.JToggleButton) evt.getSource());
    }//GEN-LAST:event_EliminarCartaBTNActionPerformed

    private void ElegirCartaBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ElegirCartaBTNActionPerformed
        PresionarBTN((javax.swing.JToggleButton) evt.getSource());
    }//GEN-LAST:event_ElegirCartaBTNActionPerformed

    private void EliminarFichaBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarFichaBTNActionPerformed
        PresionarBTN((javax.swing.JToggleButton) evt.getSource());
    }//GEN-LAST:event_EliminarFichaBTNActionPerformed

    private void CambiarFichasBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CambiarFichasBTNActionPerformed
        PresionarBTN((javax.swing.JToggleButton) evt.getSource());
    }//GEN-LAST:event_CambiarFichasBTNActionPerformed

    private void ModificadoresActivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificadoresActivosActionPerformed
        PresionarBTN((javax.swing.JToggleButton) evt.getSource());
        for (java.awt.Component Componente : ComboBoxes.getComponents()){
            if (Componente instanceof JComboBox){
                ((JComboBox) Componente).setSelectedIndex(0);
                ((JComboBox) Componente).setEnabled(ModificadoresActivos.isSelected());
            } else if (Componente instanceof JToggleButton){
                ((JToggleButton) Componente).setSelected(false);
                ((JToggleButton) Componente).setBackground((!ModificadoresActivos.isSelected())?Color.DARK_GRAY:Color.red);
                ((JToggleButton) Componente).setForeground((!ModificadoresActivos.isSelected())?Color.white:Color.black);
                ((JToggleButton) Componente).setText((!ModificadoresActivos.isSelected())?"Desactivado":"Desactivado");
            }
        }
    }//GEN-LAST:event_ModificadoresActivosActionPerformed

    private void CompartirFichasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompartirFichasActionPerformed
        PresionarBTN((javax.swing.JToggleButton) evt.getSource());
        if (((javax.swing.JToggleButton) evt.getSource()).isSelected()){
            Description.setText("Compartir fichas\nAntes de iniciar la partida debera elegirse una ficha que represente al equipo en cuestion.");
        } else Description.setText("Fichas individuales\nAntes de iniciar la partida cada jugador tendra la posibilidad de elegir sus propias fichas que usara para representarse a si mismo en el juago (este es un cambio meramente visual, el equipo que llegue primero a 2 Sequences siempre habra ganado)");
    }//GEN-LAST:event_CompartirFichasActionPerformed

    private void CargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CargarActionPerformed
        File Configuraciones = new File("Configurations");
        ArrayList<String> Setting = new ArrayList();
        for (String Configuration : Configuraciones.list()){
            String[] Name = Configuration.split("[.]");
            Setting.add(Name[0]);
        }
        if (!Setting.isEmpty()){
            Object Config = JOptionPane.showInputDialog(this,
                    "Seleccione la configuracion que desea usar: ", 
                    "Configuraciones", 
                    JOptionPane.INFORMATION_MESSAGE,
                    new ImageIcon(getIconImage()), 
                    Setting.toArray(), 0);
            try {
                Settings Ajustes = Settings.LoadFile(Config.toString());
                
                changeInfo(Ajustes.getElegirCarta(), ElegirCartas, ElegirCartaBTN);
                changeInfo(Ajustes.getBloquearEspacio(), BloquearEspacio, BloquearEspacioBTN);
                changeInfo(Ajustes.getCambiarCarta(), CambiarCartas,CambiarCartaBTN);
                changeInfo(Ajustes.getCambiarFichas(), CambiarFichas, CambiarFichasBTN);
                changeInfo(Ajustes.getEliminarCarta(), EliminarCarta, EliminarCartaBTN);
                changeInfo(Ajustes.getEliminarFichas(), EliminarFichas, EliminarFichaBTN);
                changeInfo(Ajustes.getLiberarEspacio(), LiberarEspacio, LiberarEspacioBTN);
                changeInfo(Ajustes.getOcuparEspacio(), OcuparEspacio, OcuparEspacioBTN);
                
                ModificadoresActivos.setSelected(Ajustes.areModificadoresActivos());
                ModificadoresActivos.setBackground((Ajustes.areModificadoresActivos())?Color.GREEN:Color.RED);
                ModificadoresActivos.setText((Ajustes.areModificadoresActivos())?"Activo":"Desactivo");
                
                CompartirFichas.setSelected(Ajustes.areFichasCompartidas());
                CompartirFichas.setBackground((Ajustes.areFichasCompartidas())?Color.GREEN:Color.RED);
                CompartirFichas.setText((Ajustes.areFichasCompartidas())?"Activo":"Desactivo");
                
                ElegirTipoDeCartas.setSelectedItem(Ajustes.getCardsStyle());
            } catch (Exception Ex){
            }
        }
    }//GEN-LAST:event_CargarActionPerformed
    
    private void changeInfo(String Selected, JComboBox Combo, JToggleButton Boton){
        if (!Selected.equals("GG")){
            Combo.setSelectedItem(switch (Selected){
                case "A" -> Type[1];
                case "Q" -> Type[2];
                case "K" -> Type[3];
                case "J1" -> Type[4];
                default -> Type[5];
            });
            Boton.setSelected(true);
            Boton.setBackground(Color.GREEN);
            Boton.setText("Activo");
        } else {
            Boton.setSelected(false);
            Combo.setSelectedItem(Type[0]);
            Boton.setText("Desactivo");
            Boton.setBackground(Color.RED);
        }
    }
    
    private void GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarActionPerformed
        int notSelected = 0;
        for (java.awt.Component Selected : ComboBoxes.getComponents()){
            if (Selected instanceof JComboBox && ((JComboBox) Selected).getSelectedIndex() != 0){
                
                for (java.awt.Component loop : ComboBoxes.getComponents()){
                    if (loop instanceof JComboBox){
                        
                        if (loop != Selected){
                            if (((JComboBox) loop).getSelectedItem() == ((JComboBox) Selected).getSelectedItem()){
                                JOptionPane.showMessageDialog(this, "Una carta no puede tener dos modificadores simultaneos", "Modificadores simultaneos",JOptionPane.INFORMATION_MESSAGE);
                                return ;
                            }
                        }
                        
                    }
                }
            } else notSelected++;
        }
        
        if (ModificadoresActivos.isSelected()){
            if (notSelected == 16){
                if (JOptionPane.showConfirmDialog(this, "¡Ha dejado los modificadores activos y no ha activado alguno!\n¿Desea guardar estas reglas?", "Configuración", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.NO_OPTION){
                    return ;
                }
            }
        }
        
        GuardarConfiguracion();
    }//GEN-LAST:event_GuardarActionPerformed

    private void GuardarConfiguracion(){
        try {
            String Nombre = JOptionPane.showInputDialog(this, "Ingrese como le gustaria llamar a la configuracion: ");
            if (!Nombre.isBlank()){
                if (!Nombre.matches("^[a-zA-Z0-9]+$")){
                    JOptionPane.showMessageDialog(this, "¡El nombre de las configuraciones no puede contener caracteres especiales!\nLimitese a numeros y letras.", "Configuraciones", JOptionPane.INFORMATION_MESSAGE);
                    return ;
                }
                for (String name : new File("Configurations").list()){
                    String[] RuleSetName = name.split("[.]");
                    System.out.println("File name: "+name+"\tWithout extention: "+RuleSetName[0]);
                    if (Nombre.equals(RuleSetName[0])){
                        if (JOptionPane.showConfirmDialog(this, "¡Ya existe un set de reglas llamado \""+Nombre+"\"!\n¿Desea sobre escribirlo?","Configuration",JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, new ImageIcon(getIconImage())) == JOptionPane.NO_OPTION){
                            return ;
                        }
                    }
                }
                Settings Ajustes = new Settings();
                String CardsUrl = "Icons\\";
                
                switch(ElegirTipoDeCartas.getSelectedIndex()){
                    case 0-> CardsUrl += "Estilo clasico\\";
                    case 1 -> CardsUrl += "Estilo retro\\";
                }
                
                Ajustes.setCardsUrl(CardsUrl, ElegirTipoDeCartas.getSelectedItem().toString());
                Ajustes.setElegirCarta(this.Cards[ElegirCartas.getSelectedIndex()], ElegirCartaBTN.isSelected());
                Ajustes.setBloquearEspacio(this.Cards[BloquearEspacio.getSelectedIndex()], BloquearEspacioBTN.isSelected());
                Ajustes.setCambiarCarta(this.Cards[CambiarCartas.getSelectedIndex()], CambiarCartaBTN.isSelected());
                Ajustes.setCambiarFichas(this.Cards[CambiarFichas.getSelectedIndex()], CambiarFichasBTN.isSelected());
                Ajustes.setEliminarCarta(this.Cards[EliminarCarta.getSelectedIndex()], EliminarCartaBTN.isSelected());
                Ajustes.setEliminarFichas(this.Cards[EliminarFichas.getSelectedIndex()], EliminarFichaBTN.isSelected());
                Ajustes.setLiberarEspacio(this.Cards[LiberarEspacio.getSelectedIndex()], LiberarEspacioBTN.isSelected());
                Ajustes.setOcuparEspacio(this.Cards[OcuparEspacio.getSelectedIndex()], OcuparEspacioBTN.isSelected());
                
                Ajustes.setFichasCompartidas(CompartirFichas.isSelected());
                Ajustes.setModificadores(ModificadoresActivos.isSelected());
                
                Ajustes.SaveData(Nombre);
                JOptionPane.showMessageDialog(this, "Configuracion guardad con exito!", "Configuracion", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getIconImage()));
                RestartData();
            } else JOptionPane.showMessageDialog(this, "¡Por favor no deje el campo de nombre vacio!", "ERROR", JOptionPane.ERROR_MESSAGE);
        } catch (Exception Ex){}
    }
    
    private void BloquearEspacioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BloquearEspacioActionPerformed
        if (((JComboBox) evt.getSource()).getSelectedIndex() != 0){
            Description.setText("Al jugar una carta de \"" + ((JComboBox) evt.getSource()).getSelectedItem() + "\" se bloqueara un espacio seleccionado por el jugador por 3 turnos seguidos");
            Left.setVisible(false);
            Right.setVisible(false);
        }
    }//GEN-LAST:event_BloquearEspacioActionPerformed

    private void LiberarEspacioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LiberarEspacioActionPerformed
        if (((JComboBox) evt.getSource()).getSelectedIndex() != 0){
           Description.setText("Al jugar una carta de \"" + ((JComboBox) evt.getSource()).getSelectedItem() + "\" el jugador debera elegir un espacio que este ocupado por una carta rival y debera bloquearla");
           Left.setVisible(false);
           Right.setVisible(false);
        }
    }//GEN-LAST:event_LiberarEspacioActionPerformed

    private void OcuparEspacioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OcuparEspacioActionPerformed
        if (((JComboBox) evt.getSource()).getSelectedIndex() != 0){
            Description.setText("Al jugar una carta de \"" + ((JComboBox) evt.getSource()).getSelectedItem() + "\" habra una opurtunidad de 1/5 de que el jugador pueda ocupar el espacio de una carta al azar, en caso de que la carta elegida no este disponible, simplemente se omitira la elección");
            Left.setVisible(false);
            Right.setVisible(false);
        }
    }//GEN-LAST:event_OcuparEspacioActionPerformed

    private void EliminarCartaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarCartaActionPerformed
        if (((JComboBox) evt.getSource()).getSelectedIndex() != 0){
            Description.setText("Al jugar una carta de \"" + ((JComboBox) evt.getSource()).getSelectedItem() + "\" habra una oportunidad de 1/10 de que el jugador pueda elegir a un oponente, aliado, o incluso el suyo propio para eliminar el mazo de este");
            Left.setVisible(false);
            Right.setVisible(false);
        }
    }//GEN-LAST:event_EliminarCartaActionPerformed

    private void CambiarCartasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CambiarCartasActionPerformed
        if (((JComboBox) evt.getSource()).getSelectedIndex() != 0){
            Description.setText("Al jugar una carta de \"" + ((JComboBox) evt.getSource()).getSelectedItem() + "\" habra una oportunidad de 1/20 de cambiar las cartas en los mazos de ¡todos los jugadores!");
            Left.setVisible(false);
            Right.setVisible(false);
        }
    }//GEN-LAST:event_CambiarCartasActionPerformed

    private void ElegirCartasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ElegirCartasActionPerformed
        if (((JComboBox) evt.getSource()).getSelectedIndex() != 0){
            Description.setText("Al jugar una carta de \"" + ((JComboBox) evt.getSource()).getSelectedItem() + "\" habra una oportunidad de 1/50 de que en vez de agregar una carta al azar, se le de a elegir al jugador entre 3 cartas");
            Left.setVisible(false);
            Right.setVisible(false);
        }
    }//GEN-LAST:event_ElegirCartasActionPerformed

    private void CambiarFichasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CambiarFichasActionPerformed
        if (((JComboBox) evt.getSource()).getSelectedIndex() != 0){
            Description.setText("Al jugar una carta de \"" + ((JComboBox) evt.getSource()).getSelectedItem() + "\" habra una oportunidad de 1/10 de darle al jugador la eleccion de cambiar fichas con un jugador del equipo rival o del mismo equipo");
            Left.setVisible(false);
            Right.setVisible(false);
        }
    }//GEN-LAST:event_CambiarFichasActionPerformed

    private void EliminarFichasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarFichasActionPerformed
        if (((JComboBox) evt.getSource()).getSelectedIndex() != 0){
            Description.setText("Al jugar una carta de \"" + ((JComboBox) evt.getSource()).getSelectedItem() + "\" se eliminaran de 0 ha 5 fichas a un jugador rival");
            Left.setVisible(false);
            Right.setVisible(false);
        }
    }//GEN-LAST:event_EliminarFichasActionPerformed

    private void ElegirTipoDeCartasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ElegirTipoDeCartasActionPerformed
        switch (ElegirTipoDeCartas.getSelectedIndex()){
            case 0 -> Description.setText("Estilo clasico\nSe cree que los naipes fueron inventados en China durante siglo IX. Desde allí, comenzaron a extenderse por Asia, llegando finalmente a Egipto, lugar donde las conocerían los italianos que, mediante sus redes de comercio, terminarían de difundir el juego por todo el mundo. Sin embargo, la \"baraja clásica\" no es igual a la original.\nLa baraja que usualmente llamamos \"clásica\" es la \"baraja francesa\". La mayor diferencia radica en la cantidad de naipes, ya que esta incorporó a los Reyes, Reinas, Guasones y Ases.");
            case 1 -> Description.setText("Estilo retro\nEl pixel art es un estilo artístico que es frecuentemente usado en videojuegos, aunque en un inicio su uso se debía a las limitaciones de la época, en la actualidad es usado por estudios y desarrolladores independientes debido a su simplicidad, lo que provoca que sus juegos no sean tan demandantes en el apartado gráfico.\nUsualmente suele ser llamado como el \"estilo retro\", y aunque la mayoría de compañías hayan migrado al 3D, suele ser usado para representar objetos o como elementos gráficos en el menú.");
        }

        Pos = 0;
        Iconos.clear();
        File CardIcons = new File(Cartas.getAbsolutePath() + "\\" + ((JComboBox) evt.getSource()).getSelectedItem());
        for (String GraphicStuff : CardIcons.list()){
            if (GraphicStuff.toLowerCase().contains(".png")){
                Iconos.add(Cartas.getAbsolutePath() + "\\" + ((JComboBox) evt.getSource()).getSelectedItem() + "\\" + GraphicStuff);
            }
        }

        Left.setVisible(true);
        Right.setVisible(true);
        ExampleIcon.setIcon(ScaledImage(Iconos.get(Pos), ExampleIcon.getWidth(), ExampleIcon.getHeight()));
    }//GEN-LAST:event_ElegirTipoDeCartasActionPerformed

    private ImageIcon ScaledImage(String Url, int Width, int Height) {
        ImageIcon neoIcon = new ImageIcon(Url);
        Image scaledCard = neoIcon.getImage().getScaledInstance(Width, Height, Image.SCALE_SMOOTH);
        neoIcon = new ImageIcon(scaledCard);
        return neoIcon;
    }
    
    private void RightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RightActionPerformed
        Pos = (Pos + 1 < Iconos.size())?Pos+1:0;
        ExampleIcon.setIcon(ScaledImage(Iconos.get(Pos), ExampleIcon.getWidth(), ExampleIcon.getHeight()));
    }//GEN-LAST:event_RightActionPerformed

    private void LeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LeftActionPerformed
        Pos = (Pos - 1 >= 0)?Pos-1:Iconos.size() - 1;
        ExampleIcon.setIcon(ScaledImage(Iconos.get(Pos), ExampleIcon.getWidth(), ExampleIcon.getHeight()));
    }//GEN-LAST:event_LeftActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new MenuPrincipal().setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ReiniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReiniciarActionPerformed
        RestartData();
    }//GEN-LAST:event_ReiniciarActionPerformed

    private void RestartData(){
        for (java.awt.Component Combo : ComboBoxes.getComponents()){
            if (Combo instanceof JComboBox){
                ((JComboBox) Combo).setSelectedIndex(0);
            } else if (Combo instanceof JToggleButton){
                ((JToggleButton) Combo).setBackground(Color.RED);
                ((JToggleButton) Combo).setText("Desactivo");
                ((JToggleButton) Combo).setSelected(false);
            }
        }
        ModificadoresActivos.setBackground(Color.GREEN);
        ModificadoresActivos.setText("activo");
        ModificadoresActivos.setSelected(true);
        
        CompartirFichas.setBackground(Color.RED);
        CompartirFichas.setText("Desactivo");
        CompartirFichas.setSelected(false);
        
        ElegirTipoDeCartas.setSelectedIndex(0);
    }
    
    private void PresionarBTN(javax.swing.JToggleButton Toggle){
        Toggle.setBackground((Toggle.isSelected())?Color.GREEN:Color.RED);
        Toggle.setText((Toggle.isSelected())?"Activo":"Desactivo");
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ActivarModificadoresTXT;
    private javax.swing.JComboBox BloquearEspacio;
    private javax.swing.JToggleButton BloquearEspacioBTN;
    private javax.swing.JToggleButton CambiarCartaBTN;
    private javax.swing.JComboBox CambiarCartas;
    private javax.swing.JComboBox CambiarFichas;
    private javax.swing.JToggleButton CambiarFichasBTN;
    private javax.swing.JButton Cargar;
    private javax.swing.JPanel ComboBoxes;
    private javax.swing.JToggleButton CompartirFichas;
    private javax.swing.JTextArea Description;
    private javax.swing.JToggleButton ElegirCartaBTN;
    private javax.swing.JComboBox ElegirCartas;
    private javax.swing.JComboBox<String> ElegirTipoDeCartas;
    private javax.swing.JComboBox EliminarCarta;
    private javax.swing.JToggleButton EliminarCartaBTN;
    private javax.swing.JToggleButton EliminarFichaBTN;
    private javax.swing.JComboBox EliminarFichas;
    private javax.swing.JLabel ExampleIcon;
    private javax.swing.JLabel FichasCompartidas1;
    private javax.swing.JLabel GameModifiersTXT;
    private javax.swing.JButton Guardar;
    private javax.swing.JButton Left;
    private javax.swing.JComboBox LiberarEspacio;
    private javax.swing.JToggleButton LiberarEspacioBTN;
    private javax.swing.JLabel Modif1TXT;
    private javax.swing.JLabel Modif2TXT;
    private javax.swing.JLabel Modif3TXT;
    private javax.swing.JLabel Modif4TXT;
    private javax.swing.JLabel Modif5TXT;
    private javax.swing.JLabel Modif6TXT;
    private javax.swing.JLabel Modif7TXT;
    private javax.swing.JLabel Modif8TXT;
    private javax.swing.JToggleButton ModificadoresActivos;
    private javax.swing.JSeparator ModifierSeparator;
    private javax.swing.JComboBox OcuparEspacio;
    private javax.swing.JToggleButton OcuparEspacioBTN;
    private javax.swing.JButton Reiniciar;
    private javax.swing.JButton Right;
    private javax.swing.JLabel SeleccionarEstiloTXT;
    private javax.swing.JSeparator TeamSeparator;
    private javax.swing.JLabel TeamSettingsTXT;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
